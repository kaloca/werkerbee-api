"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WorkerRatingModel = exports.CompanyRatingModel = void 0;
var _mongoose = require("mongoose");
var options = {
  discriminatorKey: 'kind',
  // define which model is used (worker or company)
  timestamps: true // this will add 'created_at' and 'updated_at' fields
};

var RatingSchema = new _mongoose.Schema({
  rating: {
    type: Number,
    min: 1,
    max: 5,
    required: true,
    validate: {
      validator: Number.isInteger,
      message: '{VALUE} is not an integer value'
    }
  },
  review: {
    type: String,
    required: false
  },
  raterId: {
    type: _mongoose.Schema.Types.ObjectId,
    required: true
  },
  rateeId: {
    type: _mongoose.Schema.Types.ObjectId,
    required: true
  },
  jobId: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: 'Job',
    required: true
  },
  jobPostingId: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: 'JobPosting',
    required: true
  }
}, options);
var Rating = (0, _mongoose.model)('Rating', RatingSchema);

// Create discriminator models
var WorkerRatingModel = Rating.discriminator('WorkerRating', new _mongoose.Schema({
  rater_id: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: 'Worker'
  },
  ratee_id: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: 'Company'
  }
}));
exports.WorkerRatingModel = WorkerRatingModel;
var CompanyRatingModel = Rating.discriminator('CompanyRating', new _mongoose.Schema({
  rater_id: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: 'Company'
  },
  ratee_id: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: 'Worker'
  }
}));
exports.CompanyRatingModel = CompanyRatingModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbW9uZ29vc2UiLCJyZXF1aXJlIiwib3B0aW9ucyIsImRpc2NyaW1pbmF0b3JLZXkiLCJ0aW1lc3RhbXBzIiwiUmF0aW5nU2NoZW1hIiwiU2NoZW1hIiwicmF0aW5nIiwidHlwZSIsIk51bWJlciIsIm1pbiIsIm1heCIsInJlcXVpcmVkIiwidmFsaWRhdGUiLCJ2YWxpZGF0b3IiLCJpc0ludGVnZXIiLCJtZXNzYWdlIiwicmV2aWV3IiwiU3RyaW5nIiwicmF0ZXJJZCIsIlR5cGVzIiwiT2JqZWN0SWQiLCJyYXRlZUlkIiwiam9iSWQiLCJyZWYiLCJqb2JQb3N0aW5nSWQiLCJSYXRpbmciLCJtb2RlbCIsIldvcmtlclJhdGluZ01vZGVsIiwiZGlzY3JpbWluYXRvciIsInJhdGVyX2lkIiwicmF0ZWVfaWQiLCJleHBvcnRzIiwiQ29tcGFueVJhdGluZ01vZGVsIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FwcC9tb2RlbHMvUmF0aW5nLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNjaGVtYSwgbW9kZWwgfSBmcm9tICdtb25nb29zZSdcblxuaW1wb3J0IHsgSVJhdGluZyB9IGZyb20gJy4uL2ludGVyZmFjZXMvbW9kZWxzL1JhdGluZydcblxuY29uc3Qgb3B0aW9ucyA9IHtcblx0ZGlzY3JpbWluYXRvcktleTogJ2tpbmQnLCAvLyBkZWZpbmUgd2hpY2ggbW9kZWwgaXMgdXNlZCAod29ya2VyIG9yIGNvbXBhbnkpXG5cdHRpbWVzdGFtcHM6IHRydWUsIC8vIHRoaXMgd2lsbCBhZGQgJ2NyZWF0ZWRfYXQnIGFuZCAndXBkYXRlZF9hdCcgZmllbGRzXG59XG5cbmNvbnN0IFJhdGluZ1NjaGVtYSA9IG5ldyBTY2hlbWEoXG5cdHtcblx0XHRyYXRpbmc6IHtcblx0XHRcdHR5cGU6IE51bWJlcixcblx0XHRcdG1pbjogMSxcblx0XHRcdG1heDogNSxcblx0XHRcdHJlcXVpcmVkOiB0cnVlLFxuXHRcdFx0dmFsaWRhdGU6IHtcblx0XHRcdFx0dmFsaWRhdG9yOiBOdW1iZXIuaXNJbnRlZ2VyLFxuXHRcdFx0XHRtZXNzYWdlOiAne1ZBTFVFfSBpcyBub3QgYW4gaW50ZWdlciB2YWx1ZScsXG5cdFx0XHR9LFxuXHRcdH0sXG5cdFx0cmV2aWV3OiB7XG5cdFx0XHR0eXBlOiBTdHJpbmcsXG5cdFx0XHRyZXF1aXJlZDogZmFsc2UsXG5cdFx0fSxcblx0XHRyYXRlcklkOiB7XG5cdFx0XHR0eXBlOiBTY2hlbWEuVHlwZXMuT2JqZWN0SWQsXG5cdFx0XHRyZXF1aXJlZDogdHJ1ZSxcblx0XHR9LFxuXHRcdHJhdGVlSWQ6IHtcblx0XHRcdHR5cGU6IFNjaGVtYS5UeXBlcy5PYmplY3RJZCxcblx0XHRcdHJlcXVpcmVkOiB0cnVlLFxuXHRcdH0sXG5cdFx0am9iSWQ6IHtcblx0XHRcdHR5cGU6IFNjaGVtYS5UeXBlcy5PYmplY3RJZCxcblx0XHRcdHJlZjogJ0pvYicsXG5cdFx0XHRyZXF1aXJlZDogdHJ1ZSxcblx0XHR9LFxuXHRcdGpvYlBvc3RpbmdJZDoge1xuXHRcdFx0dHlwZTogU2NoZW1hLlR5cGVzLk9iamVjdElkLFxuXHRcdFx0cmVmOiAnSm9iUG9zdGluZycsXG5cdFx0XHRyZXF1aXJlZDogdHJ1ZSxcblx0XHR9LFxuXHR9LFxuXHRvcHRpb25zXG4pXG5cbmNvbnN0IFJhdGluZyA9IG1vZGVsPElSYXRpbmc+KCdSYXRpbmcnLCBSYXRpbmdTY2hlbWEpXG5cbi8vIENyZWF0ZSBkaXNjcmltaW5hdG9yIG1vZGVsc1xuY29uc3QgV29ya2VyUmF0aW5nTW9kZWwgPSBSYXRpbmcuZGlzY3JpbWluYXRvcjxJUmF0aW5nPihcblx0J1dvcmtlclJhdGluZycsXG5cdG5ldyBTY2hlbWEoe1xuXHRcdHJhdGVyX2lkOiB7IHR5cGU6IFNjaGVtYS5UeXBlcy5PYmplY3RJZCwgcmVmOiAnV29ya2VyJyB9LFxuXHRcdHJhdGVlX2lkOiB7IHR5cGU6IFNjaGVtYS5UeXBlcy5PYmplY3RJZCwgcmVmOiAnQ29tcGFueScgfSxcblx0fSlcbilcblxuY29uc3QgQ29tcGFueVJhdGluZ01vZGVsID0gUmF0aW5nLmRpc2NyaW1pbmF0b3I8SVJhdGluZz4oXG5cdCdDb21wYW55UmF0aW5nJyxcblx0bmV3IFNjaGVtYSh7XG5cdFx0cmF0ZXJfaWQ6IHsgdHlwZTogU2NoZW1hLlR5cGVzLk9iamVjdElkLCByZWY6ICdDb21wYW55JyB9LFxuXHRcdHJhdGVlX2lkOiB7IHR5cGU6IFNjaGVtYS5UeXBlcy5PYmplY3RJZCwgcmVmOiAnV29ya2VyJyB9LFxuXHR9KVxuKVxuXG5leHBvcnQgeyBXb3JrZXJSYXRpbmdNb2RlbCwgQ29tcGFueVJhdGluZ01vZGVsIH1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsU0FBQSxHQUFBQyxPQUFBO0FBSUEsSUFBTUMsT0FBTyxHQUFHO0VBQ2ZDLGdCQUFnQixFQUFFLE1BQU07RUFBRTtFQUMxQkMsVUFBVSxFQUFFLElBQUksQ0FBRTtBQUNuQixDQUFDOztBQUVELElBQU1DLFlBQVksR0FBRyxJQUFJQyxnQkFBTSxDQUM5QjtFQUNDQyxNQUFNLEVBQUU7SUFDUEMsSUFBSSxFQUFFQyxNQUFNO0lBQ1pDLEdBQUcsRUFBRSxDQUFDO0lBQ05DLEdBQUcsRUFBRSxDQUFDO0lBQ05DLFFBQVEsRUFBRSxJQUFJO0lBQ2RDLFFBQVEsRUFBRTtNQUNUQyxTQUFTLEVBQUVMLE1BQU0sQ0FBQ00sU0FBUztNQUMzQkMsT0FBTyxFQUFFO0lBQ1Y7RUFDRCxDQUFDO0VBQ0RDLE1BQU0sRUFBRTtJQUNQVCxJQUFJLEVBQUVVLE1BQU07SUFDWk4sUUFBUSxFQUFFO0VBQ1gsQ0FBQztFQUNETyxPQUFPLEVBQUU7SUFDUlgsSUFBSSxFQUFFRixnQkFBTSxDQUFDYyxLQUFLLENBQUNDLFFBQVE7SUFDM0JULFFBQVEsRUFBRTtFQUNYLENBQUM7RUFDRFUsT0FBTyxFQUFFO0lBQ1JkLElBQUksRUFBRUYsZ0JBQU0sQ0FBQ2MsS0FBSyxDQUFDQyxRQUFRO0lBQzNCVCxRQUFRLEVBQUU7RUFDWCxDQUFDO0VBQ0RXLEtBQUssRUFBRTtJQUNOZixJQUFJLEVBQUVGLGdCQUFNLENBQUNjLEtBQUssQ0FBQ0MsUUFBUTtJQUMzQkcsR0FBRyxFQUFFLEtBQUs7SUFDVlosUUFBUSxFQUFFO0VBQ1gsQ0FBQztFQUNEYSxZQUFZLEVBQUU7SUFDYmpCLElBQUksRUFBRUYsZ0JBQU0sQ0FBQ2MsS0FBSyxDQUFDQyxRQUFRO0lBQzNCRyxHQUFHLEVBQUUsWUFBWTtJQUNqQlosUUFBUSxFQUFFO0VBQ1g7QUFDRCxDQUFDLEVBQ0RWLE9BQ0QsQ0FBQztBQUVELElBQU13QixNQUFNLEdBQUcsSUFBQUMsZUFBSyxFQUFVLFFBQVEsRUFBRXRCLFlBQVksQ0FBQzs7QUFFckQ7QUFDQSxJQUFNdUIsaUJBQWlCLEdBQUdGLE1BQU0sQ0FBQ0csYUFBYSxDQUM3QyxjQUFjLEVBQ2QsSUFBSXZCLGdCQUFNLENBQUM7RUFDVndCLFFBQVEsRUFBRTtJQUFFdEIsSUFBSSxFQUFFRixnQkFBTSxDQUFDYyxLQUFLLENBQUNDLFFBQVE7SUFBRUcsR0FBRyxFQUFFO0VBQVMsQ0FBQztFQUN4RE8sUUFBUSxFQUFFO0lBQUV2QixJQUFJLEVBQUVGLGdCQUFNLENBQUNjLEtBQUssQ0FBQ0MsUUFBUTtJQUFFRyxHQUFHLEVBQUU7RUFBVTtBQUN6RCxDQUFDLENBQ0YsQ0FBQztBQUFBUSxPQUFBLENBQUFKLGlCQUFBLEdBQUFBLGlCQUFBO0FBRUQsSUFBTUssa0JBQWtCLEdBQUdQLE1BQU0sQ0FBQ0csYUFBYSxDQUM5QyxlQUFlLEVBQ2YsSUFBSXZCLGdCQUFNLENBQUM7RUFDVndCLFFBQVEsRUFBRTtJQUFFdEIsSUFBSSxFQUFFRixnQkFBTSxDQUFDYyxLQUFLLENBQUNDLFFBQVE7SUFBRUcsR0FBRyxFQUFFO0VBQVUsQ0FBQztFQUN6RE8sUUFBUSxFQUFFO0lBQUV2QixJQUFJLEVBQUVGLGdCQUFNLENBQUNjLEtBQUssQ0FBQ0MsUUFBUTtJQUFFRyxHQUFHLEVBQUU7RUFBUztBQUN4RCxDQUFDLENBQ0YsQ0FBQztBQUFBUSxPQUFBLENBQUFDLGtCQUFBLEdBQUFBLGtCQUFBIn0=