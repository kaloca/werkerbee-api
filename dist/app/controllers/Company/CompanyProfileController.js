"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.editCompanyProfile = exports["default"] = void 0;
var _mongoose = _interopRequireDefault(require("mongoose"));
var _CompanyModel = _interopRequireDefault(require("../../models/CompanyModel"));
var _JobPostingModel = _interopRequireDefault(require("../../models/JobPostingModel"));
var _NotificationModel = _interopRequireDefault(require("../../models/NotificationModel"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var getCompanyProfile = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res) {
    var _req$user, companyId, company;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          companyId = (_req$user = req.user) === null || _req$user === void 0 ? void 0 : _req$user.userId;
          console.log('hey');
          _context.next = 5;
          return _CompanyModel["default"].findById(companyId);
        case 5:
          company = _context.sent;
          if (company) {
            _context.next = 8;
            break;
          }
          return _context.abrupt("return", res.status(404).json({
            message: 'Company not found.'
          }));
        case 8:
          return _context.abrupt("return", res.status(200).json({
            company: company
          }));
        case 11:
          _context.prev = 11;
          _context.t0 = _context["catch"](0);
          console.log(_context.t0);
          return _context.abrupt("return", res.sendStatus(400));
        case 15:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 11]]);
  }));
  return function getCompanyProfile(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
var getCompanyPublicProfile = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req, res) {
    var username, company, now, activeListings, name, location, overallRating, type, jobTypes, profilePicture;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.prev = 0;
          username = req.params.username;
          _context2.next = 4;
          return _CompanyModel["default"].findOne({
            username: username
          });
        case 4:
          company = _context2.sent;
          if (company) {
            _context2.next = 7;
            break;
          }
          return _context2.abrupt("return", res.status(404).json({
            message: 'Company not found.'
          }));
        case 7:
          now = new Date();
          _context2.next = 10;
          return _JobPostingModel["default"].find({
            company: company.id,
            filled: {
              $in: [false, null]
            },
            start: {
              $gt: now
            }
          });
        case 10:
          activeListings = _context2.sent;
          name = company.name, location = company.location, overallRating = company.overallRating, type = company.type, jobTypes = company.jobTypes, profilePicture = company.profilePicture;
          return _context2.abrupt("return", res.status(200).json({
            name: name,
            location: location,
            overallRating: overallRating,
            type: type,
            jobTypes: jobTypes,
            profilePicture: profilePicture,
            activeListings: activeListings.length
          }));
        case 15:
          _context2.prev = 15;
          _context2.t0 = _context2["catch"](0);
          console.log(_context2.t0);
          return _context2.abrupt("return", res.sendStatus(500));
        case 19:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[0, 15]]);
  }));
  return function getCompanyPublicProfile(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();
var editCompanyProfile = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req, res) {
    var _req$user2, companyId, allowedFields, updateData, updatedCompany;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.prev = 0;
          companyId = (_req$user2 = req.user) === null || _req$user2 === void 0 ? void 0 : _req$user2.userId;
          allowedFields = ['name', 'description'];
          updateData = {};
          allowedFields.forEach(function (field) {
            if (req.body[field] !== undefined) {
              updateData[field] = req.body[field];
            }
          });
          if (!(Object.keys(updateData).length === 0)) {
            _context3.next = 7;
            break;
          }
          return _context3.abrupt("return", res.status(400).json({
            message: 'No valid fields to update.'
          }));
        case 7:
          _context3.next = 9;
          return _CompanyModel["default"].findOneAndUpdate({
            _id: companyId
          }, {
            $set: updateData
          }, {
            "new": true
          });
        case 9:
          updatedCompany = _context3.sent;
          res.status(200).json({
            message: 'Profile updated successfully.',
            updatedCompany: updatedCompany
          });
          _context3.next = 16;
          break;
        case 13:
          _context3.prev = 13;
          _context3.t0 = _context3["catch"](0);
          res.status(500).json({
            message: 'An error occurred while updating the company profile.',
            error: _context3.t0
          });
        case 16:
        case "end":
          return _context3.stop();
      }
    }, _callee3, null, [[0, 13]]);
  }));
  return function editCompanyProfile(_x5, _x6) {
    return _ref3.apply(this, arguments);
  };
}();
exports.editCompanyProfile = editCompanyProfile;
var getCompanyJobPosts = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req, res) {
    var companyUsername, company, companyId, jobPostingsWithJobs;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _context4.prev = 0;
          companyUsername = req.params.username;
          _context4.next = 4;
          return _CompanyModel["default"].findOne({
            username: companyUsername
          });
        case 4:
          company = _context4.sent;
          if (company) {
            _context4.next = 7;
            break;
          }
          return _context4.abrupt("return", res.status(404).json({
            message: 'Company not found.'
          }));
        case 7:
          companyId = company.id;
          _context4.next = 10;
          return _JobPostingModel["default"].aggregate([{
            $match: {
              company: new _mongoose["default"].Types.ObjectId(companyId),
              $or: [{
                start: {
                  $gte: new Date()
                }
              }, {
                end: {
                  $gte: new Date()
                }
              }]
            }
          }, {
            $lookup: {
              from: 'jobs',
              localField: '_id',
              foreignField: 'jobPostingId',
              as: 'job'
            }
          }, {
            $unwind: {
              path: '$job',
              preserveNullAndEmptyArrays: true
            }
          }, {
            $project: _objectSpread(_objectSpread({}, Object.fromEntries(Object.keys(_JobPostingModel["default"].schema.paths).map(function (path) {
              return [path, 1];
            }))), {}, {
              // include all fields from JobPosting
              'job._id': 1,
              'job.status': 1
            })
          }, {
            $addFields: {
              applications: '$applications'
            }
          }, {
            $sort: {
              createdAt: -1
            }
          }]);
        case 10:
          jobPostingsWithJobs = _context4.sent;
          if (jobPostingsWithJobs) {
            _context4.next = 13;
            break;
          }
          return _context4.abrupt("return", res.status(404).json({
            message: 'No job postings.'
          }));
        case 13:
          return _context4.abrupt("return", res.status(200).json(jobPostingsWithJobs));
        case 16:
          _context4.prev = 16;
          _context4.t0 = _context4["catch"](0);
          console.log(_context4.t0);
          return _context4.abrupt("return", res.sendStatus(500));
        case 20:
        case "end":
          return _context4.stop();
      }
    }, _callee4, null, [[0, 16]]);
  }));
  return function getCompanyJobPosts(_x7, _x8) {
    return _ref4.apply(this, arguments);
  };
}();
var getStatus = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(req, res) {
    var _req$user3, companyId, company, unreadNotification;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          _context5.prev = 0;
          companyId = (_req$user3 = req.user) === null || _req$user3 === void 0 ? void 0 : _req$user3.userId;
          console.log(companyId);
          _context5.next = 5;
          return _CompanyModel["default"].findById(companyId);
        case 5:
          company = _context5.sent;
          if (company) {
            _context5.next = 8;
            break;
          }
          return _context5.abrupt("return", res.status(404).json({
            message: 'Company not found.'
          }));
        case 8:
          _context5.next = 10;
          return _NotificationModel["default"].findOne({
            user: {
              id: companyId,
              type: 'company'
            },
            readStatus: false
          });
        case 10:
          unreadNotification = _context5.sent;
          return _context5.abrupt("return", res.status(200).json({
            unreadNotification: unreadNotification ? true : false,
            profilePicture: company.profilePicture
          }));
        case 14:
          _context5.prev = 14;
          _context5.t0 = _context5["catch"](0);
          console.log(_context5.t0);
          return _context5.abrupt("return", res.sendStatus(400));
        case 18:
        case "end":
          return _context5.stop();
      }
    }, _callee5, null, [[0, 14]]);
  }));
  return function getStatus(_x9, _x10) {
    return _ref5.apply(this, arguments);
  };
}();
var CompanyProfileController = {
  getCompanyProfile: getCompanyProfile,
  getCompanyPublicProfile: getCompanyPublicProfile,
  editCompanyProfile: editCompanyProfile,
  getCompanyJobPosts: getCompanyJobPosts,
  getStatus: getStatus
};
var _default = CompanyProfileController;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbW9uZ29vc2UiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9Db21wYW55TW9kZWwiLCJfSm9iUG9zdGluZ01vZGVsIiwiX05vdGlmaWNhdGlvbk1vZGVsIiwib2JqIiwiX19lc01vZHVsZSIsIm93bktleXMiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsImtleXMiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2xzIiwiZmlsdGVyIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiZm9yRWFjaCIsImtleSIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJhcmciLCJfdG9QcmltaXRpdmUiLCJfdHlwZW9mIiwiU3RyaW5nIiwiaW5wdXQiLCJoaW50IiwicHJpbSIsIlN5bWJvbCIsInRvUHJpbWl0aXZlIiwidW5kZWZpbmVkIiwicmVzIiwiY2FsbCIsIlR5cGVFcnJvciIsIk51bWJlciIsIl9yZWdlbmVyYXRvclJ1bnRpbWUiLCJleHBvcnRzIiwiT3AiLCJwcm90b3R5cGUiLCJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsImRlc2MiLCIkU3ltYm9sIiwiaXRlcmF0b3JTeW1ib2wiLCJpdGVyYXRvciIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsImRlZmluZSIsImVyciIsIndyYXAiLCJpbm5lckZuIiwib3V0ZXJGbiIsInNlbGYiLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiY3JlYXRlIiwiY29udGV4dCIsIkNvbnRleHQiLCJtYWtlSW52b2tlTWV0aG9kIiwidHJ5Q2F0Y2giLCJmbiIsInR5cGUiLCJDb250aW51ZVNlbnRpbmVsIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwidmFsdWVzIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJtZXRob2QiLCJfaW52b2tlIiwiQXN5bmNJdGVyYXRvciIsIlByb21pc2VJbXBsIiwiaW52b2tlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlY29yZCIsInJlc3VsdCIsIl9fYXdhaXQiLCJ0aGVuIiwidW53cmFwcGVkIiwiZXJyb3IiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsInN0YXRlIiwiRXJyb3IiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGUiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsImRvbmUiLCJtZXRob2ROYW1lIiwiaW5mbyIsInJlc3VsdE5hbWUiLCJuZXh0IiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJlbnRyeSIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpdGVyYWJsZSIsIml0ZXJhdG9yTWV0aG9kIiwiaXNOYU4iLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwiY29uc3RydWN0b3IiLCJuYW1lIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJhc3luYyIsIlByb21pc2UiLCJpdGVyIiwidmFsIiwicmV2ZXJzZSIsInBvcCIsInNraXBUZW1wUmVzZXQiLCJwcmV2IiwiY2hhckF0Iiwic2xpY2UiLCJzdG9wIiwicm9vdFJlY29yZCIsInJ2YWwiLCJleGNlcHRpb24iLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJmaW5hbGx5RW50cnkiLCJjb21wbGV0ZSIsImZpbmlzaCIsIl9jYXRjaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJnZW4iLCJfbmV4dCIsIl90aHJvdyIsIl9hc3luY1RvR2VuZXJhdG9yIiwiYXJncyIsImdldENvbXBhbnlQcm9maWxlIiwiX3JlZiIsIl9jYWxsZWUiLCJyZXEiLCJfcmVxJHVzZXIiLCJjb21wYW55SWQiLCJjb21wYW55IiwiX2NhbGxlZSQiLCJfY29udGV4dCIsInVzZXIiLCJ1c2VySWQiLCJjb25zb2xlIiwibG9nIiwiQ29tcGFueU1vZGVsIiwiZmluZEJ5SWQiLCJzdGF0dXMiLCJqc29uIiwibWVzc2FnZSIsInQwIiwic2VuZFN0YXR1cyIsIl94IiwiX3gyIiwiZ2V0Q29tcGFueVB1YmxpY1Byb2ZpbGUiLCJfcmVmMiIsIl9jYWxsZWUyIiwidXNlcm5hbWUiLCJub3ciLCJhY3RpdmVMaXN0aW5ncyIsImxvY2F0aW9uIiwib3ZlcmFsbFJhdGluZyIsImpvYlR5cGVzIiwicHJvZmlsZVBpY3R1cmUiLCJfY2FsbGVlMiQiLCJfY29udGV4dDIiLCJwYXJhbXMiLCJmaW5kT25lIiwiRGF0ZSIsIkpvYlBvc3RpbmdNb2RlbCIsImZpbmQiLCJpZCIsImZpbGxlZCIsIiRpbiIsInN0YXJ0IiwiJGd0IiwiX3gzIiwiX3g0IiwiZWRpdENvbXBhbnlQcm9maWxlIiwiX3JlZjMiLCJfY2FsbGVlMyIsIl9yZXEkdXNlcjIiLCJhbGxvd2VkRmllbGRzIiwidXBkYXRlRGF0YSIsInVwZGF0ZWRDb21wYW55IiwiX2NhbGxlZTMkIiwiX2NvbnRleHQzIiwiZmllbGQiLCJib2R5IiwiZmluZE9uZUFuZFVwZGF0ZSIsIl9pZCIsIiRzZXQiLCJfeDUiLCJfeDYiLCJnZXRDb21wYW55Sm9iUG9zdHMiLCJfcmVmNCIsIl9jYWxsZWU0IiwiY29tcGFueVVzZXJuYW1lIiwiam9iUG9zdGluZ3NXaXRoSm9icyIsIl9jYWxsZWU0JCIsIl9jb250ZXh0NCIsImFnZ3JlZ2F0ZSIsIiRtYXRjaCIsIm1vbmdvb3NlIiwiVHlwZXMiLCJPYmplY3RJZCIsIiRvciIsIiRndGUiLCJlbmQiLCIkbG9va3VwIiwiZnJvbSIsImxvY2FsRmllbGQiLCJmb3JlaWduRmllbGQiLCJhcyIsIiR1bndpbmQiLCJwYXRoIiwicHJlc2VydmVOdWxsQW5kRW1wdHlBcnJheXMiLCIkcHJvamVjdCIsImZyb21FbnRyaWVzIiwic2NoZW1hIiwicGF0aHMiLCJtYXAiLCIkYWRkRmllbGRzIiwiYXBwbGljYXRpb25zIiwiJHNvcnQiLCJjcmVhdGVkQXQiLCJfeDciLCJfeDgiLCJnZXRTdGF0dXMiLCJfcmVmNSIsIl9jYWxsZWU1IiwiX3JlcSR1c2VyMyIsInVucmVhZE5vdGlmaWNhdGlvbiIsIl9jYWxsZWU1JCIsIl9jb250ZXh0NSIsIk5vdGlmaWNhdGlvbk1vZGVsIiwicmVhZFN0YXR1cyIsIl94OSIsIl94MTAiLCJDb21wYW55UHJvZmlsZUNvbnRyb2xsZXIiLCJfZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hcHAvY29udHJvbGxlcnMvQ29tcGFueS9Db21wYW55UHJvZmlsZUNvbnRyb2xsZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdCwgUmVzcG9uc2UgfSBmcm9tICdleHByZXNzJ1xuaW1wb3J0IG1vbmdvb3NlIGZyb20gJ21vbmdvb3NlJ1xuXG5pbXBvcnQgeyBJQ29tcGFueSB9IGZyb20gJ0AvYXBwL2ludGVyZmFjZXMvbW9kZWxzL0NvbXBhbnknXG5pbXBvcnQgeyBJSm9iUG9zdGluZyB9IGZyb20gJ0AvYXBwL2ludGVyZmFjZXMvbW9kZWxzL0pvYlBvc3RpbmcnXG5cbmltcG9ydCBDb21wYW55TW9kZWwgZnJvbSAnQC9hcHAvbW9kZWxzL0NvbXBhbnlNb2RlbCdcbmltcG9ydCBKb2JQb3N0aW5nTW9kZWwgZnJvbSAnQC9hcHAvbW9kZWxzL0pvYlBvc3RpbmdNb2RlbCdcbmltcG9ydCBOb3RpZmljYXRpb25Nb2RlbCBmcm9tICdAL2FwcC9tb2RlbHMvTm90aWZpY2F0aW9uTW9kZWwnXG5pbXBvcnQgeyBJTm90aWZpY2F0aW9uIH0gZnJvbSAnQC9hcHAvaW50ZXJmYWNlcy9tb2RlbHMvTm90aWZpY2F0aW9uJ1xuXG5jb25zdCBnZXRDb21wYW55UHJvZmlsZSA9IGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHtcblx0dHJ5IHtcblx0XHRjb25zdCBjb21wYW55SWQgPSByZXEudXNlcj8udXNlcklkXG5cdFx0Y29uc29sZS5sb2coJ2hleScpXG5cdFx0Y29uc3QgY29tcGFueTogSUNvbXBhbnkgfCBudWxsID0gYXdhaXQgQ29tcGFueU1vZGVsLmZpbmRCeUlkKGNvbXBhbnlJZClcblxuXHRcdGlmICghY29tcGFueSkge1xuXHRcdFx0cmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgbWVzc2FnZTogJ0NvbXBhbnkgbm90IGZvdW5kLicgfSlcblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24oeyBjb21wYW55IH0pXG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y29uc29sZS5sb2coZXJyb3IpXG5cdFx0cmV0dXJuIHJlcy5zZW5kU3RhdHVzKDQwMClcblx0fVxufVxuXG5jb25zdCBnZXRDb21wYW55UHVibGljUHJvZmlsZSA9IGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHtcblx0dHJ5IHtcblx0XHRjb25zdCB1c2VybmFtZSA9IHJlcS5wYXJhbXMudXNlcm5hbWVcblxuXHRcdGNvbnN0IGNvbXBhbnk6IElDb21wYW55IHwgbnVsbCA9IGF3YWl0IENvbXBhbnlNb2RlbC5maW5kT25lKHsgdXNlcm5hbWUgfSlcblxuXHRcdGlmICghY29tcGFueSkge1xuXHRcdFx0cmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgbWVzc2FnZTogJ0NvbXBhbnkgbm90IGZvdW5kLicgfSlcblx0XHR9XG5cblx0XHRjb25zdCBub3cgPSBuZXcgRGF0ZSgpXG5cdFx0Y29uc3QgYWN0aXZlTGlzdGluZ3M6IElKb2JQb3N0aW5nW10gfCBudWxsID0gYXdhaXQgSm9iUG9zdGluZ01vZGVsLmZpbmQoe1xuXHRcdFx0Y29tcGFueTogY29tcGFueS5pZCxcblx0XHRcdGZpbGxlZDogeyAkaW46IFtmYWxzZSwgbnVsbF0gfSxcblx0XHRcdHN0YXJ0OiB7ICRndDogbm93IH0sXG5cdFx0fSlcblxuXHRcdGNvbnN0IHsgbmFtZSwgbG9jYXRpb24sIG92ZXJhbGxSYXRpbmcsIHR5cGUsIGpvYlR5cGVzLCBwcm9maWxlUGljdHVyZSB9ID1cblx0XHRcdGNvbXBhbnlcblxuXHRcdHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbih7XG5cdFx0XHRuYW1lLFxuXHRcdFx0bG9jYXRpb24sXG5cdFx0XHRvdmVyYWxsUmF0aW5nLFxuXHRcdFx0dHlwZSxcblx0XHRcdGpvYlR5cGVzLFxuXHRcdFx0cHJvZmlsZVBpY3R1cmUsXG5cdFx0XHRhY3RpdmVMaXN0aW5nczogYWN0aXZlTGlzdGluZ3MubGVuZ3RoLFxuXHRcdH0pXG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y29uc29sZS5sb2coZXJyb3IpXG5cdFx0cmV0dXJuIHJlcy5zZW5kU3RhdHVzKDUwMClcblx0fVxufVxuXG5leHBvcnQgY29uc3QgZWRpdENvbXBhbnlQcm9maWxlID0gYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSkgPT4ge1xuXHR0cnkge1xuXHRcdGNvbnN0IGNvbXBhbnlJZCA9IHJlcS51c2VyPy51c2VySWRcblxuXHRcdGNvbnN0IGFsbG93ZWRGaWVsZHMgPSBbJ25hbWUnLCAnZGVzY3JpcHRpb24nXVxuXG5cdFx0Y29uc3QgdXBkYXRlRGF0YTogYW55ID0ge31cblxuXHRcdGFsbG93ZWRGaWVsZHMuZm9yRWFjaCgoZmllbGQpID0+IHtcblx0XHRcdGlmIChyZXEuYm9keVtmaWVsZF0gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHR1cGRhdGVEYXRhW2ZpZWxkXSA9IHJlcS5ib2R5W2ZpZWxkXVxuXHRcdFx0fVxuXHRcdH0pXG5cblx0XHRpZiAoT2JqZWN0LmtleXModXBkYXRlRGF0YSkubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRyZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBtZXNzYWdlOiAnTm8gdmFsaWQgZmllbGRzIHRvIHVwZGF0ZS4nIH0pXG5cdFx0fVxuXG5cdFx0Y29uc3QgdXBkYXRlZENvbXBhbnkgPSBhd2FpdCBDb21wYW55TW9kZWwuZmluZE9uZUFuZFVwZGF0ZShcblx0XHRcdHsgX2lkOiBjb21wYW55SWQgfSxcblx0XHRcdHsgJHNldDogdXBkYXRlRGF0YSB9LFxuXHRcdFx0eyBuZXc6IHRydWUgfVxuXHRcdClcblxuXHRcdHJlc1xuXHRcdFx0LnN0YXR1cygyMDApXG5cdFx0XHQuanNvbih7IG1lc3NhZ2U6ICdQcm9maWxlIHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5LicsIHVwZGF0ZWRDb21wYW55IH0pXG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0cmVzLnN0YXR1cyg1MDApLmpzb24oe1xuXHRcdFx0bWVzc2FnZTogJ0FuIGVycm9yIG9jY3VycmVkIHdoaWxlIHVwZGF0aW5nIHRoZSBjb21wYW55IHByb2ZpbGUuJyxcblx0XHRcdGVycm9yLFxuXHRcdH0pXG5cdH1cbn1cblxuY29uc3QgZ2V0Q29tcGFueUpvYlBvc3RzID0gYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSkgPT4ge1xuXHR0cnkge1xuXHRcdGNvbnN0IGNvbXBhbnlVc2VybmFtZSA9IHJlcS5wYXJhbXMudXNlcm5hbWVcblxuXHRcdGNvbnN0IGNvbXBhbnk6IElDb21wYW55IHwgbnVsbCA9IGF3YWl0IENvbXBhbnlNb2RlbC5maW5kT25lKHtcblx0XHRcdHVzZXJuYW1lOiBjb21wYW55VXNlcm5hbWUsXG5cdFx0fSlcblxuXHRcdGlmICghY29tcGFueSkge1xuXHRcdFx0cmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgbWVzc2FnZTogJ0NvbXBhbnkgbm90IGZvdW5kLicgfSlcblx0XHR9XG5cblx0XHRjb25zdCBjb21wYW55SWQgPSBjb21wYW55LmlkXG5cblx0XHRjb25zdCBqb2JQb3N0aW5nc1dpdGhKb2JzID0gYXdhaXQgSm9iUG9zdGluZ01vZGVsLmFnZ3JlZ2F0ZShbXG5cdFx0XHR7XG5cdFx0XHRcdCRtYXRjaDoge1xuXHRcdFx0XHRcdGNvbXBhbnk6IG5ldyBtb25nb29zZS5UeXBlcy5PYmplY3RJZChjb21wYW55SWQpLFxuXHRcdFx0XHRcdCRvcjogW3sgc3RhcnQ6IHsgJGd0ZTogbmV3IERhdGUoKSB9IH0sIHsgZW5kOiB7ICRndGU6IG5ldyBEYXRlKCkgfSB9XSxcblx0XHRcdFx0fSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdCRsb29rdXA6IHtcblx0XHRcdFx0XHRmcm9tOiAnam9icycsXG5cdFx0XHRcdFx0bG9jYWxGaWVsZDogJ19pZCcsXG5cdFx0XHRcdFx0Zm9yZWlnbkZpZWxkOiAnam9iUG9zdGluZ0lkJyxcblx0XHRcdFx0XHRhczogJ2pvYicsXG5cdFx0XHRcdH0sXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHQkdW53aW5kOiB7XG5cdFx0XHRcdFx0cGF0aDogJyRqb2InLFxuXHRcdFx0XHRcdHByZXNlcnZlTnVsbEFuZEVtcHR5QXJyYXlzOiB0cnVlLFxuXHRcdFx0XHR9LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0JHByb2plY3Q6IHtcblx0XHRcdFx0XHQuLi5PYmplY3QuZnJvbUVudHJpZXMoXG5cdFx0XHRcdFx0XHRPYmplY3Qua2V5cyhKb2JQb3N0aW5nTW9kZWwuc2NoZW1hLnBhdGhzKS5tYXAoKHBhdGgpID0+IFtwYXRoLCAxXSlcblx0XHRcdFx0XHQpLCAvLyBpbmNsdWRlIGFsbCBmaWVsZHMgZnJvbSBKb2JQb3N0aW5nXG5cdFx0XHRcdFx0J2pvYi5faWQnOiAxLFxuXHRcdFx0XHRcdCdqb2Iuc3RhdHVzJzogMSxcblx0XHRcdFx0fSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdCRhZGRGaWVsZHM6IHsgYXBwbGljYXRpb25zOiAnJGFwcGxpY2F0aW9ucycgfSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdCRzb3J0OiB7IGNyZWF0ZWRBdDogLTEgfSxcblx0XHRcdH0sXG5cdFx0XSlcblxuXHRcdGlmICgham9iUG9zdGluZ3NXaXRoSm9icykge1xuXHRcdFx0cmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgbWVzc2FnZTogJ05vIGpvYiBwb3N0aW5ncy4nIH0pXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKGpvYlBvc3RpbmdzV2l0aEpvYnMpXG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y29uc29sZS5sb2coZXJyb3IpXG5cdFx0cmV0dXJuIHJlcy5zZW5kU3RhdHVzKDUwMClcblx0fVxufVxuXG5jb25zdCBnZXRTdGF0dXMgPSBhc3luYyAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKSA9PiB7XG5cdHRyeSB7XG5cdFx0Y29uc3QgY29tcGFueUlkID0gcmVxLnVzZXI/LnVzZXJJZFxuXHRcdGNvbnNvbGUubG9nKGNvbXBhbnlJZClcblxuXHRcdGNvbnN0IGNvbXBhbnk6IElDb21wYW55IHwgbnVsbCA9IGF3YWl0IENvbXBhbnlNb2RlbC5maW5kQnlJZChjb21wYW55SWQpXG5cblx0XHRpZiAoIWNvbXBhbnkpIHtcblx0XHRcdHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IG1lc3NhZ2U6ICdDb21wYW55IG5vdCBmb3VuZC4nIH0pXG5cdFx0fVxuXG5cdFx0Y29uc3QgdW5yZWFkTm90aWZpY2F0aW9uOiBJTm90aWZpY2F0aW9uIHwgbnVsbCA9XG5cdFx0XHRhd2FpdCBOb3RpZmljYXRpb25Nb2RlbC5maW5kT25lKHtcblx0XHRcdFx0dXNlcjoge1xuXHRcdFx0XHRcdGlkOiBjb21wYW55SWQsXG5cdFx0XHRcdFx0dHlwZTogJ2NvbXBhbnknLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRyZWFkU3RhdHVzOiBmYWxzZSxcblx0XHRcdH0pXG5cblx0XHRyZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24oe1xuXHRcdFx0dW5yZWFkTm90aWZpY2F0aW9uOiB1bnJlYWROb3RpZmljYXRpb24gPyB0cnVlIDogZmFsc2UsXG5cdFx0XHRwcm9maWxlUGljdHVyZTogY29tcGFueS5wcm9maWxlUGljdHVyZSxcblx0XHR9KVxuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGNvbnNvbGUubG9nKGVycm9yKVxuXHRcdHJldHVybiByZXMuc2VuZFN0YXR1cyg0MDApXG5cdH1cbn1cblxuY29uc3QgQ29tcGFueVByb2ZpbGVDb250cm9sbGVyID0ge1xuXHRnZXRDb21wYW55UHJvZmlsZSxcblx0Z2V0Q29tcGFueVB1YmxpY1Byb2ZpbGUsXG5cdGVkaXRDb21wYW55UHJvZmlsZSxcblx0Z2V0Q29tcGFueUpvYlBvc3RzLFxuXHRnZXRTdGF0dXMsXG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbXBhbnlQcm9maWxlQ29udHJvbGxlclxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQ0EsSUFBQUEsU0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBS0EsSUFBQUMsYUFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsZ0JBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLGtCQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFBOEQsU0FBQUQsdUJBQUFLLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxnQkFBQUEsR0FBQTtBQUFBLFNBQUFFLFFBQUFDLE1BQUEsRUFBQUMsY0FBQSxR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