"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.requireAuth = void 0;
var _jsonwebtoken = _interopRequireDefault(require("jsonwebtoken"));
var _secrets = require("../util/secrets");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
var requireAuth = function requireAuth(req, res, next) {
  var authHeader = req.headers.authorization;
  if (!authHeader) {
    return res.status(401).json({
      message: 'No authorization header provided.'
    });
  }
  var token = authHeader.split(' ')[1];
  try {
    var _req$user, _req$user2;
    var base64SecretKey = _secrets.AUTH_SECRET;
    var secretKey = Buffer.from(base64SecretKey, 'base64').toString('utf8');
    var decodedToken = _jsonwebtoken["default"].verify(token, secretKey);
    req.user = decodedToken;
    if ((_req$user = req.user) !== null && _req$user !== void 0 && _req$user.userId && ((_req$user2 = req.user) === null || _req$user2 === void 0 ? void 0 : _req$user2.userId) !== decodedToken.userId) {
      return res.status(403).json({
        message: 'User ID from token does not match user ID from request.'
      });
    }
    next();
  } catch (error) {
    console.log(error);
    return res.status(401).json({
      message: 'Invalid or expired token.'
    });
  }
};
exports.requireAuth = requireAuth;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfanNvbndlYnRva2VuIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfc2VjcmV0cyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJyZXF1aXJlQXV0aCIsInJlcSIsInJlcyIsIm5leHQiLCJhdXRoSGVhZGVyIiwiaGVhZGVycyIsImF1dGhvcml6YXRpb24iLCJzdGF0dXMiLCJqc29uIiwibWVzc2FnZSIsInRva2VuIiwic3BsaXQiLCJfcmVxJHVzZXIiLCJfcmVxJHVzZXIyIiwiYmFzZTY0U2VjcmV0S2V5IiwiQVVUSF9TRUNSRVQiLCJzZWNyZXRLZXkiLCJCdWZmZXIiLCJmcm9tIiwidG9TdHJpbmciLCJkZWNvZGVkVG9rZW4iLCJqd3QiLCJ2ZXJpZnkiLCJ1c2VyIiwidXNlcklkIiwiZXJyb3IiLCJjb25zb2xlIiwibG9nIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcHAvbWlkZGxld2FyZXMvQXV0aE1pZGRsZXdhcmUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdCwgUmVzcG9uc2UsIE5leHRGdW5jdGlvbiB9IGZyb20gJ2V4cHJlc3MnXG5pbXBvcnQgand0LCB7IEp3dFBheWxvYWQgfSBmcm9tICdqc29ud2VidG9rZW4nXG5cbmltcG9ydCB7IEFVVEhfU0VDUkVUIH0gZnJvbSAnLi4vdXRpbC9zZWNyZXRzJ1xuaW50ZXJmYWNlIE15Snd0UGF5bG9hZCBleHRlbmRzIEp3dFBheWxvYWQge1xuXHR1c2VySWQ6IHN0cmluZ1xufVxuXG5leHBvcnQgY29uc3QgcmVxdWlyZUF1dGggPSAoXG5cdHJlcTogUmVxdWVzdCxcblx0cmVzOiBSZXNwb25zZSxcblx0bmV4dDogTmV4dEZ1bmN0aW9uXG4pID0+IHtcblx0Y29uc3QgYXV0aEhlYWRlciA9IHJlcS5oZWFkZXJzLmF1dGhvcml6YXRpb25cblxuXHRpZiAoIWF1dGhIZWFkZXIpIHtcblx0XHRyZXR1cm4gcmVzXG5cdFx0XHQuc3RhdHVzKDQwMSlcblx0XHRcdC5qc29uKHsgbWVzc2FnZTogJ05vIGF1dGhvcml6YXRpb24gaGVhZGVyIHByb3ZpZGVkLicgfSlcblx0fVxuXG5cdGNvbnN0IHRva2VuID0gYXV0aEhlYWRlci5zcGxpdCgnICcpWzFdXG5cblx0dHJ5IHtcblx0XHRjb25zdCBiYXNlNjRTZWNyZXRLZXkgPSBBVVRIX1NFQ1JFVCBhcyBzdHJpbmdcblx0XHRjb25zdCBzZWNyZXRLZXkgPSBCdWZmZXIuZnJvbShiYXNlNjRTZWNyZXRLZXksICdiYXNlNjQnKS50b1N0cmluZygndXRmOCcpXG5cdFx0Y29uc3QgZGVjb2RlZFRva2VuID0gand0LnZlcmlmeSh0b2tlbiwgc2VjcmV0S2V5KSBhcyBNeUp3dFBheWxvYWRcblx0XHQ7KHJlcSBhcyBhbnkpLnVzZXIgPSBkZWNvZGVkVG9rZW5cblxuXHRcdGlmIChyZXEudXNlcj8udXNlcklkICYmIHJlcS51c2VyPy51c2VySWQgIT09IGRlY29kZWRUb2tlbi51c2VySWQpIHtcblx0XHRcdHJldHVybiByZXMuc3RhdHVzKDQwMykuanNvbih7XG5cdFx0XHRcdG1lc3NhZ2U6ICdVc2VyIElEIGZyb20gdG9rZW4gZG9lcyBub3QgbWF0Y2ggdXNlciBJRCBmcm9tIHJlcXVlc3QuJyxcblx0XHRcdH0pXG5cdFx0fVxuXG5cdFx0bmV4dCgpXG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y29uc29sZS5sb2coZXJyb3IpXG5cdFx0cmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgbWVzc2FnZTogJ0ludmFsaWQgb3IgZXhwaXJlZCB0b2tlbi4nIH0pXG5cdH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsSUFBQUEsYUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUMsUUFBQSxHQUFBRCxPQUFBO0FBQTZDLFNBQUFELHVCQUFBRyxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsZ0JBQUFBLEdBQUE7QUFLdEMsSUFBTUUsV0FBVyxHQUFHLFNBQWRBLFdBQVdBLENBQ3ZCQyxHQUFZLEVBQ1pDLEdBQWEsRUFDYkMsSUFBa0IsRUFDZDtFQUNKLElBQU1DLFVBQVUsR0FBR0gsR0FBRyxDQUFDSSxPQUFPLENBQUNDLGFBQWE7RUFFNUMsSUFBSSxDQUFDRixVQUFVLEVBQUU7SUFDaEIsT0FBT0YsR0FBRyxDQUNSSyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQ1hDLElBQUksQ0FBQztNQUFFQyxPQUFPLEVBQUU7SUFBb0MsQ0FBQyxDQUFDO0VBQ3pEO0VBRUEsSUFBTUMsS0FBSyxHQUFHTixVQUFVLENBQUNPLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFFdEMsSUFBSTtJQUFBLElBQUFDLFNBQUEsRUFBQUMsVUFBQTtJQUNILElBQU1DLGVBQWUsR0FBR0Msb0JBQXFCO0lBQzdDLElBQU1DLFNBQVMsR0FBR0MsTUFBTSxDQUFDQyxJQUFJLENBQUNKLGVBQWUsRUFBRSxRQUFRLENBQUMsQ0FBQ0ssUUFBUSxDQUFDLE1BQU0sQ0FBQztJQUN6RSxJQUFNQyxZQUFZLEdBQUdDLHdCQUFHLENBQUNDLE1BQU0sQ0FBQ1osS0FBSyxFQUFFTSxTQUFTLENBQWlCO0lBQy9EZixHQUFHLENBQVNzQixJQUFJLEdBQUdILFlBQVk7SUFFakMsSUFBSSxDQUFBUixTQUFBLEdBQUFYLEdBQUcsQ0FBQ3NCLElBQUksY0FBQVgsU0FBQSxlQUFSQSxTQUFBLENBQVVZLE1BQU0sSUFBSSxFQUFBWCxVQUFBLEdBQUFaLEdBQUcsQ0FBQ3NCLElBQUksY0FBQVYsVUFBQSx1QkFBUkEsVUFBQSxDQUFVVyxNQUFNLE1BQUtKLFlBQVksQ0FBQ0ksTUFBTSxFQUFFO01BQ2pFLE9BQU90QixHQUFHLENBQUNLLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxDQUFDO1FBQzNCQyxPQUFPLEVBQUU7TUFDVixDQUFDLENBQUM7SUFDSDtJQUVBTixJQUFJLENBQUMsQ0FBQztFQUNQLENBQUMsQ0FBQyxPQUFPc0IsS0FBSyxFQUFFO0lBQ2ZDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDRixLQUFLLENBQUM7SUFDbEIsT0FBT3ZCLEdBQUcsQ0FBQ0ssTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUM7TUFBRUMsT0FBTyxFQUFFO0lBQTRCLENBQUMsQ0FBQztFQUN0RTtBQUNELENBQUM7QUFBQW1CLE9BQUEsQ0FBQTVCLFdBQUEsR0FBQUEsV0FBQSJ9